esphome:
  name: "${name}"
  name_add_mac_suffix: true
  platformio_options:
    upload_speed: 921600
  includes:
  - neopixel-idf.h
  - firmware-ota.h
  - mqtt.h
  on_boot:
    then:
      - lambda: !lambda FirmwareInfo();
      - output.turn_off: blue_led
      - delay: 0.1s
      - light.control:
            id: leds
            state: on
            red: 1
            green: 0
            blue: 0
      - delay: 0.5s
      - light.control:
            id: leds
            state: on
            red: 1
            green: 0.7
            blue: 0
      - delay: 0.5s
      - light.control:
            id: leds
            state: on
            red: 0
            green: 1
            blue: 0
      - delay: 0.5s
      - light.control:
            id: leds
            state: off
      - lambda: |-
          mqttSetup();

globals:
  - id: node_id
    type: int
    restore_value: true
    initial_value: '45'
  - id: co2Green
    type: int
    restore_value: true
    initial_value: '0'
  - id: co2Orange
    type: int
    restore_value: true
    initial_value: '800'
  - id: co2Red
    type: int
    restore_value: true
    initial_value: '1000'
  - id: co2DarkRed
    type: int
    restore_value: true
    initial_value: '1200'

wifi:
  id: wifi2

esp32_improv:
  id: improvConf
  authorizer: boot
  status_indicator: blue_led

co2improv:
  id: improvMgr

logger:
  level: DEBUG

#web_server:
#  port: 80

mqtt:
  id: mqttclient
  broker: mqtt-dev.co2mon.nz
  username: co2monitor
  password: co2monitor
  discovery: false
  log_topic:
    topic: esphome/logs
    level: DEBUG

switch:
  - platform: factory_reset
    name: Restart with Factory Default Settings
    id: reset
    internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
      inverted: true
    name: Boot Button
    id: boot
    internal: true
    on_click:
      - min_length: 2s
        max_length: 5s
        then:
          - lambda: |-
              improvMgr->startImprov();
      - min_length: 5s
        max_length: 20s
        then:
          - switch.turn_on: reset

output:
  - platform: gpio
    id: blue_led
    pin:
      number: GPIO2
      mode:
        output: true

sensor:
  - platform: scd4x
    id: scd40
    update_interval: "15s"
    co2:
      name: "CO2"
      id: co2
      on_value:
        - if:
            condition:
              sensor.in_range:
                  id: co2
                  below: 800
            then:
              - light.control:
                  id: leds
                  state: on
                  red: 0
                  green: 1
                  blue: 0
        - if:
            condition:
              sensor.in_range:
                id: co2
                above: 800
                below: 1000
            then:
              - light.control:
                    id: leds
                    state: on
                    red: 1
                    green: 0.7
                    blue: 0
        - if:
            condition:
              sensor.in_range:
                id: co2
                above: 1000
            then:
              - light.control:
                    id: leds
                    state: on
                    red: 1
                    green: 0
                    blue: 0
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity

light:
- platform: custom
  lambda: |-
    auto np = new NeopixelIDF();
    App.register_component(np);
    return {np};

  lights:
    - name: "LEDs"
      id: leds
      default_transition_length: 0s
      internal: true

font:
  - file: "fonts/Roboto-Regular.ttf"
    id: roboto
    size: 15
  - file: "fonts/Roboto-Regular.ttf"
    id: roboto30
    size: 30
  - file: "fonts/Roboto-Regular.ttf"
    id: roboto10
    size: 10

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    brightness: 100%
    rotation: "${display_rotation}"
    id: display1
    lambda: |-
      if (id(wifi2).is_connected()) {
        it.printf(0, 0, id(roboto), "W");
      }  else {
        it.printf(0, 0, id(roboto), "-");
      }
      it.printf(50,15, id(roboto30), "%.0f", id(co2).state);
      it.printf(0, 50, id(roboto10), "temp:  %.1f   hum: %.0f%%", id(temperature).state, id(humidity).state);
